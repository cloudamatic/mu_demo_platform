# RUNNER STUFFS
default['gitlab-runner']['env']['CONFIG_FILE'] = nil # Config file (default: "/etc/gitlab-runner/config.toml") [$CONFIG_FILE]
default['gitlab-runner']['env']['RUNNER_TAG_LIST'] = nil # Tag list [$RUNNER_TAG_LIST]
#default['gitlab-runner']['env']['REGISTER_NON_INTERACTIVE'] = nil # Run registration unattended [$REGISTER_NON_INTERACTIVE]
default['gitlab-runner']['env']['REGISTER_LEAVE_RUNNER'] = nil # Don't remove runner if registration fails [$REGISTER_LEAVE_RUNNER]
default['gitlab-runner']['env']['REGISTRATION_TOKEN'] = nil # Runner's registration token [$REGISTRATION_TOKEN]
default['gitlab-runner']['env']['REGISTER_RUN_UNTAGGED'] = nil # Register to run untagged builds; defaults to 'true' when 'tag-list' is empty [$REGISTER_RUN_UNTAGGED]
default['gitlab-runner']['env']['REGISTER_LOCKED'] = nil # Lock Runner for current project, defaults to 'true' [$REGISTER_LOCKED]
#default['gitlab-runner']['env']['RUNNER_NAME'] = nil # Runner name (default: "DEMO-DEV-2018031314-WO-GITLAB-SERVER") [$RUNNER_NAME]
default['gitlab-runner']['env']['RUNNER_LIMIT'] = nil # Maximum number of builds processed by this runner (default: "0") [$RUNNER_LIMIT]
default['gitlab-runner']['env']['RUNNER_OUTPUT_LIMIT'] = nil # Maximum build trace size in kilobytes (default: "0") [$RUNNER_OUTPUT_LIMIT]
default['gitlab-runner']['env']['RUNNER_REQUEST_CONCURRENCY'] = nil # Maximum concurrency for job requests (default: "0") [$RUNNER_REQUEST_CONCURRENCY]
default['gitlab-runner']['env']['CI_SERVER_URL'] = nil # Runner URL [$CI_SERVER_URL]
default['gitlab-runner']['env']['CI_SERVER_TOKEN'] = nil # Runner token [$CI_SERVER_TOKEN]
default['gitlab-runner']['env']['CI_SERVER_TLS_CA_FILE'] = nil # File containing the certificates to verify the peer when using HTTPS [$CI_SERVER_TLS_CA_FILE]
default['gitlab-runner']['env']['CI_SERVER_TLS_CERT_FILE'] = nil # File containing certificate for TLS client auth when using HTTPS [$CI_SERVER_TLS_CERT_FILE]
default['gitlab-runner']['env']['CI_SERVER_TLS_KEY_FILE'] = nil # File containing private key for TLS client auth when using HTTPS [$CI_SERVER_TLS_KEY_FILE]
#default['gitlab-runner']['env']['RUNNER_EXECUTOR'] = nil # Select executor, eg. shell, docker, etc. [$RUNNER_EXECUTOR]
default['gitlab-runner']['env']['RUNNER_BUILDS_DIR'] = nil # Directory where builds are stored [$RUNNER_BUILDS_DIR]
default['gitlab-runner']['env']['RUNNER_CACHE_DIR'] = nil # Directory where build cache is stored [$RUNNER_CACHE_DIR]
default['gitlab-runner']['env']['CLONE_URL'] = nil # Overwrite the default URL used to clone or fetch the git ref [$CLONE_URL]
default['gitlab-runner']['env']['RUNNER_ENV'] = nil # Custom environment variables injected to build environment [$RUNNER_ENV]
default['gitlab-runner']['env']['RUNNER_PRE_CLONE_SCRIPT'] = nil # Runner-specific command script executed before code is pulled [$RUNNER_PRE_CLONE_SCRIPT]
default['gitlab-runner']['env']['RUNNER_PRE_BUILD_SCRIPT'] = nil # Runner-specific command script executed after code is pulled, just before build executes [$RUNNER_PRE_BUILD_SCRIPT]
default['gitlab-runner']['env']['RUNNER_POST_BUILD_SCRIPT'] = nil # Runner-specific command script executed after code is pulled and just after build executes [$RUNNER_POST_BUILD_SCRIPT]
default['gitlab-runner']['env']['RUNNER_SHELL'] = nil # Select bash, cmd or powershell [$RUNNER_SHELL]
default['gitlab-runner']['env']['SSH_USER'] = nil # User name [$SSH_USER]
default['gitlab-runner']['env']['SSH_PASSWORD'] = nil # User password [$SSH_PASSWORD]
default['gitlab-runner']['env']['SSH_HOST'] = nil # Remote host [$SSH_HOST]
default['gitlab-runner']['env']['SSH_PORT'] = nil # Remote host port [$SSH_PORT]
default['gitlab-runner']['env']['SSH_IDENTITY_FILE'] = nil # Identity file to be used [$SSH_IDENTITY_FILE]
default['gitlab-runner']['env']['DOCKER_HOST'] = nil # Docker daemon address [$DOCKER_HOST]
default['gitlab-runner']['env']['DOCKER_CERT_PATH'] = nil # Certificate path [$DOCKER_CERT_PATH]
default['gitlab-runner']['env']['DOCKER_TLS_VERIFY'] = nil # Use TLS and verify the remote [$DOCKER_TLS_VERIFY]
default['gitlab-runner']['env']['DOCKER_HOSTNAME'] = nil # Custom container hostname [$DOCKER_HOSTNAME]
default['gitlab-runner']['env']['DOCKER_IMAGE'] = nil # Docker image to be used [$DOCKER_IMAGE]
default['gitlab-runner']['env']['DOCKER_RUNTIME'] = nil # Docker runtime to be used [$DOCKER_RUNTIME]
default['gitlab-runner']['env']['DOCKER_CPUSET_CPUS'] = nil # String value containing the cgroups CpusetCpus to use [$DOCKER_CPUSET_CPUS]
default['gitlab-runner']['env']['DOCKER_CPUS'] = nil # Number of CPUs [$DOCKER_CPUS]
default['gitlab-runner']['env']['DOCKER_DNS'] = nil # A list of DNS servers for the container to use [$DOCKER_DNS]
default['gitlab-runner']['env']['DOCKER_DNS_SEARCH'] = nil # A list of DNS search domains [$DOCKER_DNS_SEARCH]
default['gitlab-runner']['env']['DOCKER_PRIVILEGED'] = nil # Give extended privileges to container [$DOCKER_PRIVILEGED]
default['gitlab-runner']['env']['DOCKER_USERNS_MODE'] = nil # User namespace to use [$DOCKER_USERNS_MODE]
default['gitlab-runner']['env']['DOCKER_CAP_ADD'] = nil # Add Linux capabilities [$DOCKER_CAP_ADD]
default['gitlab-runner']['env']['DOCKER_CAP_DROP'] = nil # Drop Linux capabilities [$DOCKER_CAP_DROP]
default['gitlab-runner']['env']['DOCKER_SECURITY_OPT'] = nil # Security Options [$DOCKER_SECURITY_OPT]
default['gitlab-runner']['env']['DOCKER_DEVICES'] = nil # Add a host device to the container [$DOCKER_DEVICES]
default['gitlab-runner']['env']['DOCKER_DISABLE_CACHE'] = nil # Disable all container caching [$DOCKER_DISABLE_CACHE]
default['gitlab-runner']['env']['DOCKER_VOLUMES'] = nil # Bind mount a volumes [$DOCKER_VOLUMES]
default['gitlab-runner']['env']['DOCKER_VOLUME_DRIVER'] = nil # Volume driver to be used [$DOCKER_VOLUME_DRIVER]
default['gitlab-runner']['env']['DOCKER_CACHE_DIR'] = nil # Directory where to store caches [$DOCKER_CACHE_DIR]
default['gitlab-runner']['env']['DOCKER_EXTRA_HOSTS'] = nil # Add a custom host-to-IP mapping [$DOCKER_EXTRA_HOSTS]
default['gitlab-runner']['env']['DOCKER_VOLUMES_FROM'] = nil # A list of volumes to inherit from another container [$DOCKER_VOLUMES_FROM]
default['gitlab-runner']['env']['DOCKER_NETWORK_MODE'] = nil # Add container to a custom network [$DOCKER_NETWORK_MODE]
default['gitlab-runner']['env']['DOCKER_LINKS'] = nil # Add link to another container [$DOCKER_LINKS]
default['gitlab-runner']['env']['DOCKER_SERVICES'] = nil # Add service that is started with container [$DOCKER_SERVICES]
default['gitlab-runner']['env']['DOCKER_WAIT_FOR_SERVICES_TIMEOUT'] = nil # How long to wait for service startup (default: "0") [$DOCKER_WAIT_FOR_SERVICES_TIMEOUT]
default['gitlab-runner']['env']['DOCKER_ALLOWED_IMAGES'] = nil # Whitelist allowed images [$DOCKER_ALLOWED_IMAGES]
default['gitlab-runner']['env']['DOCKER_ALLOWED_SERVICES'] = nil # Whitelist allowed services [$DOCKER_ALLOWED_SERVICES]
default['gitlab-runner']['env']['DOCKER_PULL_POLICY'] = nil # Image pull policy: never, if-not-present, always [$DOCKER_PULL_POLICY]
default['gitlab-runner']['env']['DOCKER_SHM_SIZE'] = nil # Shared memory size for docker images (in bytes) (default: "0") [$DOCKER_SHM_SIZE]
default['gitlab-runner']['env']['DOCKER_TMPFS'] = nil # A toml table/json object with the format key=values. When set this will mount the specified path in the key as a tmpfs volume in the main container, using the options specified as key. For the supported options, see the documentation for the unix 'mount' command (default: "{}") [$DOCKER_TMPFS]
default['gitlab-runner']['env']['DOCKER_SERVICES_TMPFS'] = nil # A toml table/json object with the format key=values. When set this will mount the specified path in the key as a tmpfs volume in all the service containers, using the options specified as key. For the supported options, see the documentation for the unix 'mount' command (default: "{}") [$DOCKER_SERVICES_TMPFS]
default['gitlab-runner']['env']['DOCKER_SYSCTLS'] = nil # Sysctl options, a toml table/json object of key=value. Value is expected to be a string. (default: "{}") [$DOCKER_SYSCTLS]
default['gitlab-runner']['env']['DOCKER_HELPER_IMAGE'] = nil # [ADVANCED] Override the default helper image used to clone repos and upload artifacts [$DOCKER_HELPER_IMAGE]
default['gitlab-runner']['env']['PARALLELS_BASE_NAME'] = nil # VM name to be used [$PARALLELS_BASE_NAME]
default['gitlab-runner']['env']['PARALLELS_TEMPLATE_NAME'] = nil # VM template to be created [$PARALLELS_TEMPLATE_NAME]
default['gitlab-runner']['env']['PARALLELS_DISABLE_SNAPSHOTS'] = nil # Disable snapshoting to speedup VM creation [$PARALLELS_DISABLE_SNAPSHOTS]
default['gitlab-runner']['env']['VIRTUALBOX_BASE_NAME'] = nil # VM name to be used [$VIRTUALBOX_BASE_NAME]
default['gitlab-runner']['env']['VIRTUALBOX_BASE_SNAPSHOT'] = nil # Name or UUID of a specific VM snapshot to clone [$VIRTUALBOX_BASE_SNAPSHOT]
default['gitlab-runner']['env']['VIRTUALBOX_DISABLE_SNAPSHOTS'] = nil # Disable snapshoting to speedup VM creation [$VIRTUALBOX_DISABLE_SNAPSHOTS]
default['gitlab-runner']['env']['CACHE_TYPE'] = nil # Select caching method: s3, to use S3 buckets [$CACHE_TYPE]
default['gitlab-runner']['env']['S3_SERVER_ADDRESS'] = nil # A host:port to the used S3-compatible server [$S3_SERVER_ADDRESS]
default['gitlab-runner']['env']['S3_ACCESS_KEY'] = nil # S3 Access Key [$S3_ACCESS_KEY]
default['gitlab-runner']['env']['S3_SECRET_KEY'] = nil # S3 Secret Key [$S3_SECRET_KEY]
default['gitlab-runner']['env']['S3_BUCKET_NAME'] = nil # Name of the bucket where cache will be stored [$S3_BUCKET_NAME]
default['gitlab-runner']['env']['S3_BUCKET_LOCATION'] = nil # Name of S3 region [$S3_BUCKET_LOCATION]
default['gitlab-runner']['env']['S3_CACHE_INSECURE'] = nil # Use insecure mode (without https) [$S3_CACHE_INSECURE]
default['gitlab-runner']['env']['S3_CACHE_PATH'] = nil # Name of the path to prepend to the cache URL [$S3_CACHE_PATH]
default['gitlab-runner']['env']['CACHE_SHARED'] = nil # Enable cache sharing between runners. [$CACHE_SHARED]
default['gitlab-runner']['env']['MACHINE_IDLE_COUNT'] = nil # Maximum idle machines (default: "0") [$MACHINE_IDLE_COUNT]
default['gitlab-runner']['env']['MACHINE_IDLE_TIME'] = nil # Minimum time after node can be destroyed (default: "0") [$MACHINE_IDLE_TIME]
default['gitlab-runner']['env']['MACHINE_MAX_BUILDS'] = nil # Maximum number of builds processed by machine (default: "0") [$MACHINE_MAX_BUILDS]
default['gitlab-runner']['env']['MACHINE_DRIVER'] = nil # The driver to use when creating machine [$MACHINE_DRIVER]
default['gitlab-runner']['env']['MACHINE_NAME'] = nil # The template for machine name (needs to include %s) [$MACHINE_NAME]
default['gitlab-runner']['env']['MACHINE_OPTIONS'] = nil # Additional machine creation options [$MACHINE_OPTIONS]
default['gitlab-runner']['env']['MACHINE_OFF_PEAK_PERIODS'] = nil # Time periods when the scheduler is in the OffPeak mode [$MACHINE_OFF_PEAK_PERIODS]
default['gitlab-runner']['env']['MACHINE_OFF_PEAK_TIMEZONE'] = nil # Timezone for the OffPeak periods (defaults to Local) [$MACHINE_OFF_PEAK_TIMEZONE]
default['gitlab-runner']['env']['MACHINE_OFF_PEAK_IDLE_COUNT'] = nil # Maximum idle machines when the scheduler is in the OffPeak mode (default: "0") [$MACHINE_OFF_PEAK_IDLE_COUNT]
default['gitlab-runner']['env']['MACHINE_OFF_PEAK_IDLE_TIME'] = nil # Minimum time after machine can be destroyed when the scheduler is in the OffPeak mode (default: "0") [$MACHINE_OFF_PEAK_IDLE_TIME]
default['gitlab-runner']['env']['KUBERNETES_HOST'] = nil # Optional Kubernetes master host URL (auto-discovery attempted if not specified) [$KUBERNETES_HOST]
default['gitlab-runner']['env']['KUBERNETES_CERT_FILE'] = nil # Optional Kubernetes master auth certificate [$KUBERNETES_CERT_FILE]
default['gitlab-runner']['env']['KUBERNETES_KEY_FILE'] = nil # Optional Kubernetes master auth private key [$KUBERNETES_KEY_FILE]
default['gitlab-runner']['env']['KUBERNETES_CA_FILE'] = nil # Optional Kubernetes master auth ca certificate [$KUBERNETES_CA_FILE]
default['gitlab-runner']['env']['KUBERNETES_BEARER_TOKEN_OVERWRITE_ALLOWED'] = nil # Bool to authorize builds to specify their own bearer token for creation. [$KUBERNETES_BEARER_TOKEN_OVERWRITE_ALLOWED]
default['gitlab-runner']['env']['KUBERNETES_BEARER_TOKEN'] = nil # Optional Kubernetes service account token used to start build pods. [$KUBERNETES_BEARER_TOKEN]
default['gitlab-runner']['env']['KUBERNETES_NAMESPACE'] = nil # Default docker image to use for builds when none is specified [$KUBERNETES_IMAGE]
default['gitlab-runner']['env']['KUBERNETES_NAMESPACE_OVERWRITE_ALLOWED'] = nil # Namespace to run Kubernetes jobs in [$KUBERNETES_NAMESPACE]
default['gitlab-runner']['env']['KUBERNETES_NAMESPACE_OVERWRITE_ALLOWED'] = nil # Regex to validate 'KUBERNETES_NAMESPACE_OVERWRITE' value [$KUBERNETES_NAMESPACE_OVERWRITE_ALLOWED]
default['gitlab-runner']['env']['KUBERNETES_PRIVILEGED'] = nil # Run all containers with the privileged flag enabled [$KUBERNETES_PRIVILEGED]
default['gitlab-runner']['env']['KUBERNETES_CPU_LIMIT'] = nil # The CPU allocation given to build containers [$KUBERNETES_CPU_LIMIT]
default['gitlab-runner']['env']['KUBERNETES_MEMORY_LIMIT'] = nil # The amount of memory allocated to build containers [$KUBERNETES_MEMORY_LIMIT]
default['gitlab-runner']['env']['KUBERNETES_SERVICE_CPU_LIMIT'] = nil # The CPU allocation given to build service containers [$KUBERNETES_SERVICE_CPU_LIMIT]
default['gitlab-runner']['env']['KUBERNETES_SERVICE_MEMORY_LIMIT'] = nil # The amount of memory allocated to build service containers [$KUBERNETES_SERVICE_MEMORY_LIMIT]
default['gitlab-runner']['env']['KUBERNETES_HELPER_CPU_LIMIT'] = nil # The CPU allocation given to build helper containers [$KUBERNETES_HELPER_CPU_LIMIT]
default['gitlab-runner']['env']['KUBERNETES_HELPER_MEMORY_LIMIT'] = nil # The amount of memory allocated to build helper containers [$KUBERNETES_HELPER_MEMORY_LIMIT]
default['gitlab-runner']['env']['KUBERNETES_CPU_REQUEST'] = nil # The CPU allocation requested for build containers [$KUBERNETES_CPU_REQUEST]
default['gitlab-runner']['env']['KUBERNETES_MEMORY_REQUEST'] = nil # The amount of memory requested from build containers [$KUBERNETES_MEMORY_REQUEST]
default['gitlab-runner']['env']['KUBERNETES_SERVICE_CPU_REQUEST'] = nil # The CPU allocation requested for build service containers [$KUBERNETES_SERVICE_CPU_REQUEST]
default['gitlab-runner']['env']['KUBERNETES_SERVICE_MEMORY_REQUEST'] = nil # The amount of memory requested for build service containers [$KUBERNETES_SERVICE_MEMORY_REQUEST]
default['gitlab-runner']['env']['KUBERNETES_HELPER_CPU_REQUEST'] = nil # The CPU allocation requested for build helper containers [$KUBERNETES_HELPER_CPU_REQUEST]
default['gitlab-runner']['env']['KUBERNETES_HELPER_MEMORY_REQUEST'] = nil # The amount of memory requested for build helper containers [$KUBERNETES_HELPER_MEMORY_REQUEST]
default['gitlab-runner']['env']['KUBERNETES_PULL_POLICY'] = nil # Policy for if/when to pull a container image (never, if-not-present, always). The cluster default will be used if not set [$KUBERNETES_PULL_POLICY]
default['gitlab-runner']['env']['KUBERNETES_IMAGE_PULL_SECRETS'] = nil # A list of image pull secrets that are used for pulling docker image [$KUBERNETES_IMAGE_PULL_SECRETS]
default['gitlab-runner']['env']['KUBERNETES_HELPER_IMAGE'] = nil # [ADVANCED] Override the default helper image used to clone repos and upload artifacts [$KUBERNETES_HELPER_IMAGE]
default['gitlab-runner']['env']['KUBERNETES_TERMINATIONGRACEPERIODSECONDS'] = nil # Duration after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. (default: "0") [$KUBERNETES_TERMINATIONGRACEPERIODSECONDS]
default['gitlab-runner']['env']['KUBERNETES_POLL_INTERVAL'] = nil # How frequently, in seconds, the runner will poll the Kubernetes pod it has just created to check its status (default: "0") [$KUBERNETES_POLL_INTERVAL]
default['gitlab-runner']['env']['KUBERNETES_POLL_TIMEOUT'] = nil # The total amount of time, in seconds, that needs to pass before the runner will timeout attempting to connect to the pod it has just created (useful for queueing more builds that the cluster can handle at a time) (default: "0") [$KUBERNETES_POLL_TIMEOUT]
default['gitlab-runner']['env']['KUBERNETES_SERVICE_ACCOUNT'] = nil # Executor pods will use this Service Account to talk to kubernetes API [$KUBERNETES_SERVICE_ACCOUNT]
default['gitlab-runner']['env']['KUBERNETES_SERVICE_ACCOUNT_OVERWRITE_ALLOWED'] = nil # Regex to validate 'KUBERNETES_SERVICE_ACCOUNT' value [$KUBERNETES_SERVICE_ACCOUNT_OVERWRITE_ALLOWED]
default['gitlab-runner']['env']['KUBERNETES_POD_ANNOTATIONS_OVERWRITE_ALLOWED'] = nil # Regex to validate 'KUBERNETES_POD_ANNOTATIONS_*' values [$KUBERNETES_POD_ANNOTATIONS_OVERWRITE_ALLOWED]